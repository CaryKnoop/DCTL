
/*
C_Analyze


This DCTL works togeher with C_Mark.  C_Mark places information on the bottom 4 lines of the video.
C_Analyzes describes the changes made between the C_Mark and C_Analyze nodes.

Bug: small line at the bottom of the first panel.

Version 004

*/

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{
	float3 p = make_float3(
		_tex2D(p_TexR, p_X, p_Y),
		_tex2D(p_TexG, p_X, p_Y),
		_tex2D(p_TexB, p_X, p_Y));

	if (p_X < 0.75f * p_Width)
		return  p;
	if (!(p_Y % (int)(p_Height / 40)))
		return  make_float3(0.25, 0.25, 0.25);

	// else

	float xval  = (float) 4*(p_X - 0.75f*p_Width);
	float pre   = (float) xval / p_Width;
	float pos   = (float) (p_Y - 1) / (p_Height / 4.0f);    
	float scope = (float) 1.0f - (pos - (int)pos);

	int   raise = (p_Y < p_Height / 4);
	float post = (
		_tex2D(p_TexR, xval, p_Height - 4) +
		_tex2D(p_TexG, xval, p_Height - 4) +
		_tex2D(p_TexB, xval, p_Height - 4)) / 3;
	float val = (post - pre) + 0.5f;

	if (p_Y < 2 * p_Height / 4)
	{
		if (raise)
			val += pre - 0.5f;
		if (val >= scope - 0.005 && val <= scope + 0.005)
			return  make_float3(1, 1, 1);
		else if (raise)
			return  make_float3(
			(0.1f + p.x) / 2,
				(0.1f + p.y) / 2,
				(0.1f + p.z) / 2);
		else
			return  make_float3(
			(0.2f + p.x) / 2,
				(0.2f + p.y) / 2,
				(0.2f + p.z) / 2);
	}
	else
	{
		raise = (p_Y < 3 * p_Height / 4);
		float postR = _tex2D(p_TexR, xval, p_Height - 3);
		float valR = (float)(postR - pre) + 0.5f;
		float postG = _tex2D(p_TexG, xval, p_Height - 2);
		float valG = (float)(postG - pre) + 0.5f;
		float postB = _tex2D(p_TexB, xval, p_Height - 1);
		float valB = (float)(postB - pre) + 0.5f;

		if (raise)
		{
			valR += pre - 0.5f;
			valB += pre - 0.5f;
			valG += pre - 0.5f;
		}
		if (valR >= scope - 0.005 && valR <= scope + 0.005)
			return  make_float3(1, (postR == postG) ? 1 : 0, (postR == postB) ? 1 : 0);
		if (valG >= scope - 0.005 && valG <= scope + 0.005)
			return  make_float3((postG == postR) ? 1 : 0, 1, (postG == postB) ? 1 : 0);
		if (valB >= scope - 0.005 && valB <= scope + 0.005)
			return  make_float3((postB == postR) ? 1 : 0, (postB == postG) ? 1 : 0, 1);
		else
			return  make_float3(
			(( (raise) ? 0.1f : 0.2f) + p.x) / 2,
			(( (raise) ? 0.1f : 0.2f) + p.y) / 2,
			(( (raise) ? 0.1f : 0.2f) + p.z) / 2);
	}
}
